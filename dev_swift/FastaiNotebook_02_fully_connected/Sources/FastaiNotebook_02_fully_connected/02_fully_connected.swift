/*
THIS FILE WAS AUTOGENERATED! DO NOT EDIT!
file to edit: 02_fully_connected.ipynb

*/
        
import Path
import TensorFlow

public func normalize(_ x:Tensor<Float>, mean:Tensor<Float>, std:Tensor<Float>) -> Tensor<Float> {
    return (x-mean)/std
}

public extension Tensor where Scalar:TensorFlowFloatingPoint {
    func std() -> Tensor<Scalar> {
        return sqrt(self.variance(alongAxes: Array(self.shape.indices)).flattened()[0])
    }
}

public func testNearZero(_ a:Tensor<Float>, tolerance:Float=1e-3) {
    assert(abs(a)<tolerance, "Near zero: \(a)")
}

public func mse(_ out:Tensor<Float>, _ targ:Tensor<Float>) -> Tensor<Float> {
    return (out.squeezingShape(at: -1) - targ).squared().mean()
}
